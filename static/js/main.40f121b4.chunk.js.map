{"version":3,"sources":["user.svg","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behaviour","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","User","alt","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAe,G,MAAA,IAA0B,kC,4CCSzCA,IAASC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAoB3B,SAASC,IAML,OACI,qCACI,wBAAQC,UAAU,UAAUC,QAPX,WACrB,IAAMC,EAAW,IAAId,IAASS,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAKjB,iCAGA,2GAKZ,SAASG,IACL,OAAOR,EAAKS,aACR,wBAAQL,QAAS,kBAAMJ,EAAKU,WAA5B,sBAMR,SAASC,IACL,IAAMC,EAAQC,mBACRC,EAAcb,EAAUc,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAErD,EAAmBC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAChBD,EAAEE,iBADc,EAES5B,EAAKS,YAAvBoB,EAFS,EAETA,IAAKC,EAFI,EAEJA,SAFI,SAGVhB,EAAYiB,IAAI,CAClBC,KAAMT,EACNU,UAAW1C,IAASU,UAAUiC,WAAWC,kBACzCN,MACAC,aAPY,OAUhBN,EAAa,IACbZ,EAAMwB,QAAQC,eAAe,CAAEC,UAAW,WAX1B,2CAAH,sDAcjB,OACI,qCACI,iCACKjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAEvD,sBAAMC,IAAKhC,OAGf,uBAAMiC,SAAUpB,EAAhB,UACI,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QAAQG,YAAY,uBACpF,wBAAQC,KAAK,SAASC,UAAW5B,EAAjC,sCAMhB,SAASkB,EAAYW,GACjB,MAAgCA,EAAMV,QAA9BV,EAAR,EAAQA,KAAMH,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SACbuB,EAAexB,IAAQ7B,EAAKS,YAAYoB,IAAM,OAAS,WAE7D,OACI,sBAAK1B,UAAS,kBAAakD,GAA3B,UACI,qBAAKC,IAAKxB,GAAYyB,EAAMC,IAAI,SAChC,4BAAIxB,OAKDyB,MA5Ff,WAEE,MAAeC,YAAa1D,GAArB2D,EAAP,oBAEA,OACE,sBAAKxD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,sEACA,cAACK,EAAD,OAEF,kCACKmD,EAAO,cAAChD,EAAD,IAAc,cAACT,EAAD,UCtBjB0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.40f121b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.3e1538c1.svg\";","import React, { useState, useRef } from \"react\";\nimport './App.css';\nimport User from \"./user.svg\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyAbIYrEDVf2UkGP7WVqc7hnmfx2i7yVJko\",\n    authDomain: \"chat-app-7a981.firebaseapp.com\",\n    projectId: \"chat-app-7a981\",\n    storageBucket: \"chat-app-7a981.appspot.com\",\n    messagingSenderId: \"410461663256\",\n    appId: \"1:410461663256:web:b5ca5ad0ceb1f42745536d\",\n    measurementId: \"G-R8KHV7SQN0\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n      <section>\n          {user ? <ChatRoom/> : <SignIn/>}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider);\n    }\n\n    return (\n        <>\n            <button className=\"sign-in\" onClick={signInWithGoogle}>\n                Sign in with Google\n            </button>\n            <p>Do not violate the community guidelines or you will be banned for life!</p>\n        </>\n    )\n}\n\nfunction SignOut() {\n    return auth.currentUser && (\n        <button onClick={() => auth.signOut()}>\n            Sign Out\n        </button>\n    )\n}\n\nfunction ChatRoom() {\n    const dummy = useRef();\n    const messagesRef = firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt').limit(25);\n    \n    const [messages] = useCollectionData(query, { idField: 'id'});\n\n    const [formValue, setFormValue] = useState('');\n\n    const sendMessage = async(e) => {\n        e.preventDefault();\n        const {uid, photoURL } = auth.currentUser;\n        await messagesRef.add({\n            text: formValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL\n        });\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behaviour: \"smooth\" });\n    }\n\n    return (\n        <>\n            <main>\n                {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n                <span ref={dummy}></span>\n            </main>\n\n            <form onSubmit={sendMessage}>\n                <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n                <button type=\"submit\" disabled={!formValue} >üïäÔ∏è</button>\n            </form>\n        </>\n    )\n}\n\nfunction ChatMessage(props) {\n    const { text, uid, photoURL } = props.message;\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (\n        <div className={`message ${messageClass}`}>\n            <img src={photoURL || User} alt=\"user\"/>\n            <p>{text}</p>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}